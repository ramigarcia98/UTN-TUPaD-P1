'''
1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. 
Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el 
factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario
'''

# def factorial_recursivo(num):
#     return 1 if num == 0 else num * factorial_recursivo(num-1)
#     '''
#     if num == 1:
#         return 1
#     else:
#         return num * factorial_recursivo(num-1)
#     '''

# num = int(input("Ingrese el numero del cual desea saber su factorial: "))
# print (factorial_recursivo(num))

'''
2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada.
 Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.
Serie de Fibonacc: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1.597, 2.584, 4.181, 6.765,
 10.946, 17.711, 28.657, 46.368, ‚Ä¶
 '''

# def fibonacci_recursivo(posicion):
#     if posicion == 0:
#         return 0 
#     elif posicion == 1:
#         return 1
#     else:
#         return fibonacci_recursivo(posicion-1) + fibonacci_recursivo(posicion - 2)

# posicion = int(input("Ingrese la posicion de la cual desea sabes la serie de Fibonacci: "))
# print(fibonacci_recursivo(posicion))

'''
3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente,
 utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1).
 Prueba esta funci√≥n en un algoritmo general.
'''
# def potencia_recursiva(base, exponente):
#     if exponente == 0:
#         return 1
#     else:
#         return base * potencia_recursiva(base, exponente - 1)

# base = int(input("Ingrese la base de la potencia: "))
# exponente = int(input("Ingrese el exponente: "))
# print(f"{base}^{exponente}={potencia_recursiva(base,exponente)}")

'''
4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal
 y devuelva su representaci√≥n en binario como una cadena de texto.
'''
# def decimal_a_binario(decimal):
#     if decimal == 0:
#         return "0"
#     else:
#         residuo = decimal % 2
#         return decimal_a_binario(decimal // 2) + str(residuo)
        
    
# decimal = int(input("Ingrese un numero decimal: "))
# print(f"El numero {decimal} en binario es {decimal_a_binario(decimal)}")

'''
5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto
 sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
'''
# def es_palindromo(palabra):
#     if len(palabra) <= 1:
#         return True
    
#     if palabra[0] != palabra[-1]:
#         return False

#     return es_palindromo(palabra[1:-1])

# palabra = input("Ingrese una frase sin espacio: ")
# print(es_palindromo(palabra))

'''
6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero
 positivo y devuelva la suma de todos sus d√≠gitos.
'''

# def suma_digitos(n):
#     if n == 0:
#         return 0
#     else:
#         resto = n % 10
#         return resto + suma_digitos(n // 10) 

# n = int(input("Ingrese un numero: "))
# print(f"La suma de los digitos del numero {n} es igual a {suma_digitos(n)}")

'''
7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques,
en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo
y devuelva el total de bloques que necesita para construir toda la pir√°mide.
'''

# def contar_bloques(n):
#     if n == 0:
#         return n
#     else:
#         return n + contar_bloques(n-1)

# n = int(input("Ingrese el numero de bloques de la base: "))
# print(f"Comenzando con esa cantidad de bloques, para hacer una piramide necesitaras {contar_bloques(n)} bloques")

'''
8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero
positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.
'''
def contar_digito(n, d):
    
    if n == 0:
        return 0
    if (n % 10) == d:
        contador = 1
    else: 
        contador = 0
    return contador + contar_digito(n // 10, d)
         
n = int(input("Ingrese un numero: "))
d = int(input("Ingrese algun digito del 0 al 9: "))
print(f"El numero {n} tiene {contar_digito(n,d)} veces el digito {d}")